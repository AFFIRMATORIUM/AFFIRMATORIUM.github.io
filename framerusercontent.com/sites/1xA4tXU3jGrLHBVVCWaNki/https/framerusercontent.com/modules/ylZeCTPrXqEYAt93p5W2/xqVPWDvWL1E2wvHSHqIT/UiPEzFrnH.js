// Generated by Framer (3406f4c)
import {
    jsx as _jsx
} from "react/jsx-runtime";
import {
    addFonts,
    addPropertyControls,
    ControlType,
    cx,
    Instance,
    useActiveVariantCallback,
    useComponentViewport,
    useLocaleInfo,
    useVariantState,
    withCSS
} from "framer";
import {
    LayoutGroup,
    motion,
    MotionConfigContext
} from "framer-motion";
import * as React from "react";
import {
    useRef
} from "react";
import EnvelopeOpen from "https://framerusercontent.com/modules/bdbU0djEjcevzqN1TAey/2A1ffDZ5DsqiXYRgoqfw/Jz003i_fI.js";
import Envelope from "https://framerusercontent.com/modules/PHnaEKMsCFmquemlCSxJ/MIdBdxZFJhImvZLivnwC/lHPjf9ulG.js";
const enabledGestures = {
    XmHfMWJ2F: {
        hover: true
    }
};
const cycleOrder = ["XmHfMWJ2F", "UwPpuGaaB"];
const serializationHash = "framer-dWUln";
const variantClassNames = {
    UwPpuGaaB: "framer-v-ij6b4c",
    XmHfMWJ2F: "framer-v-jhjfi7"
};

function addPropertyOverrides(overrides, ...variants) {
    const nextOverrides = {};
    variants ? .forEach(variant => variant && Object.assign(nextOverrides, overrides[variant]));
    return nextOverrides;
}
const transition1 = {
    bounce: .2,
    delay: 0,
    duration: .4,
    type: "spring"
};
const Transition = ({
    value,
    children
}) => {
    const config = React.useContext(MotionConfigContext);
    const transition = value ? ? config.transition;
    const contextValue = React.useMemo(() => ({ ...config,
        transition
    }), [JSON.stringify(transition)]);
    return /*#__PURE__*/ _jsx(MotionConfigContext.Provider, {
        value: contextValue,
        children: children
    });
};
const Variants = motion.create(React.Fragment);
const humanReadableVariantMap = {
    "black closed": "XmHfMWJ2F",
    "light open": "UwPpuGaaB"
};
const getProps = ({
    click,
    height,
    hover,
    id,
    width,
    ...props
}) => {
    return { ...props,
        EqZpmm5Mc: hover ? ? props.EqZpmm5Mc,
        pijj9xXnJ: click ? ? props.pijj9xXnJ,
        variant: humanReadableVariantMap[props.variant] ? ? props.variant ? ? "XmHfMWJ2F"
    };
};
const createLayoutDependency = (props, variants) => {
    if (props.layoutDependency) return variants.join("-") + props.layoutDependency;
    return variants.join("-");
};
const Component = /*#__PURE__*/ React.forwardRef(function(props, ref) {
    const fallbackRef = useRef(null);
    const refBinding = ref ? ? fallbackRef;
    const defaultLayoutId = React.useId();
    const {
        activeLocale,
        setLocale
    } = useLocaleInfo();
    const componentViewport = useComponentViewport();
    const {
        style,
        className,
        layoutId,
        variant,
        EqZpmm5Mc,
        pijj9xXnJ,
        ...restProps
    } = getProps(props);
    const {
        baseVariant,
        classNames,
        clearLoadingGesture,
        gestureHandlers,
        gestureVariant,
        isLoading,
        setGestureState,
        setVariant,
        variants
    } = useVariantState({
        cycleOrder,
        defaultVariant: "XmHfMWJ2F",
        enabledGestures,
        ref: refBinding,
        variant,
        variantClassNames
    });
    const layoutDependency = createLayoutDependency(props, variants);
    const {
        activeVariantCallback,
        delay
    } = useActiveVariantCallback(baseVariant);
    const onTap10n6t35 = activeVariantCallback(async (...args) => {
        setGestureState({
            isPressed: false
        });
        if (pijj9xXnJ) {
            const res = await pijj9xXnJ(...args);
            if (res === false) return false;
        }
    });
    const onMouseEnter6ee2q8 = activeVariantCallback(async (...args) => {
        setGestureState({
            isHovered: true
        });
        if (EqZpmm5Mc) {
            const res = await EqZpmm5Mc(...args);
            if (res === false) return false;
        }
        setVariant("UwPpuGaaB");
    });
    const onMouseLeave1tfmnte = activeVariantCallback(async (...args) => {
        setGestureState({
            isHovered: false
        });
        setVariant("XmHfMWJ2F");
    });
    const sharedStyleClassNames = [];
    const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
    return /*#__PURE__*/ _jsx(LayoutGroup, {
        id: layoutId ? ? defaultLayoutId,
        children: /*#__PURE__*/ _jsx(Variants, {
            animate: variants,
            initial: false,
            children: /*#__PURE__*/ _jsx(Transition, {
                value: transition1,
                children: /*#__PURE__*/ _jsx(motion.div, { ...restProps,
                    ...gestureHandlers,
                    className: cx(scopingClassNames, "framer-jhjfi7", className, classNames),
                    "data-framer-name": "black closed",
                    "data-highlight": true,
                    layoutDependency: layoutDependency,
                    layoutId: "XmHfMWJ2F",
                    onMouseEnter: onMouseEnter6ee2q8,
                    onTap: onTap10n6t35,
                    ref: refBinding,
                    style: { ...style
                    },
                    ...addPropertyOverrides({
                        "XmHfMWJ2F-hover": {
                            "data-framer-name": undefined
                        },
                        UwPpuGaaB: {
                            "data-framer-name": "light open",
                            onMouseLeave: onMouseLeave1tfmnte
                        }
                    }, baseVariant, gestureVariant),
                    children: /*#__PURE__*/ _jsx(Instance, {
                        animated: true,
                        className: "framer-saipz9",
                        Component: Envelope,
                        layoutDependency: layoutDependency,
                        layoutId: "fBx17MswP",
                        style: {
                            "--1m6trwb": 0,
                            "--21h8s6": "var(--token-59e0057d-33bd-4745-b3ad-1acb6546c5ce, rgb(51, 51, 51))",
                            "--pgex8v": 1.5
                        },
                        variants: {
                            "XmHfMWJ2F-hover": {
                                "--21h8s6": "var(--token-ca491423-ed69-4073-9859-26d521a5ce20, rgb(255, 107, 0))"
                            },
                            UwPpuGaaB: {
                                "--21h8s6": "var(--token-ca491423-ed69-4073-9859-26d521a5ce20, rgb(255, 107, 0))"
                            }
                        },
                        ...addPropertyOverrides({
                            "XmHfMWJ2F-hover": {
                                Component: EnvelopeOpen
                            },
                            UwPpuGaaB: {
                                Component: EnvelopeOpen
                            }
                        }, baseVariant, gestureVariant)
                    })
                })
            })
        })
    });
});
const css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-dWUln.framer-16a56cc, .framer-dWUln .framer-16a56cc { display: block; }", ".framer-dWUln.framer-jhjfi7 { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: hidden; padding: 0px; position: relative; width: min-content; }", ".framer-dWUln .framer-saipz9 { flex: none; height: var(--framer-aspect-ratio-supported, 20px); position: relative; width: 20px; }"];
/**
 * This is a generated Framer component.
 * @framerIntrinsicHeight 20
 * @framerIntrinsicWidth 20
 * @framerCanvasComponentVariantDetails {"propertyName":"variant","data":{"default":{"layout":["auto","auto"]},"UwPpuGaaB":{"layout":["auto","auto"]},"mRpVDM9Hn":{"layout":["auto","auto"]}}}
 * @framerVariables {"EqZpmm5Mc":"hover","pijj9xXnJ":"click"}
 * @framerImmutableVariables true
 * @framerDisplayContentsDiv false
 * @framerAutoSizeImages true
 * @framerComponentViewportWidth true
 * @framerColorSyntax true
 */
const FramerUiPEzFrnH = withCSS(Component, css, "framer-dWUln");
export default FramerUiPEzFrnH;
FramerUiPEzFrnH.displayName = "Icon Envelope";
FramerUiPEzFrnH.defaultProps = {
    height: 20,
    width: 20
};
addPropertyControls(FramerUiPEzFrnH, {
    variant: {
        options: ["XmHfMWJ2F", "UwPpuGaaB"],
        optionTitles: ["black closed", "light open"],
        title: "Variant",
        type: ControlType.Enum
    },
    EqZpmm5Mc: {
        title: "Hover",
        type: ControlType.EventHandler
    },
    pijj9xXnJ: {
        title: "Click",
        type: ControlType.EventHandler
    }
});
addFonts(FramerUiPEzFrnH, [{
    explicitInter: true,
    fonts: []
}], {
    supportsExplicitInterCodegen: true
});
export const __FramerMetadata__ = {
    "exports": {
        "default": {
            "type": "reactComponent",
            "name": "FramerUiPEzFrnH",
            "slots": [],
            "annotations": {
                "framerDisplayContentsDiv": "false",
                "framerComponentViewportWidth": "true",
                "framerIntrinsicWidth": "20",
                "framerContractVersion": "1",
                "framerCanvasComponentVariantDetails": "{\"propertyName\":\"variant\",\"data\":{\"default\":{\"layout\":[\"auto\",\"auto\"]},\"UwPpuGaaB\":{\"layout\":[\"auto\",\"auto\"]},\"mRpVDM9Hn\":{\"layout\":[\"auto\",\"auto\"]}}}",
                "framerAutoSizeImages": "true",
                "framerVariables": "{\"EqZpmm5Mc\":\"hover\",\"pijj9xXnJ\":\"click\"}",
                "framerImmutableVariables": "true",
                "framerColorSyntax": "true",
                "framerIntrinsicHeight": "20"
            }
        },
        "Props": {
            "type": "tsType",
            "annotations": {
                "framerContractVersion": "1"
            }
        },
        "__FramerMetadata__": {
            "type": "variable"
        }
    }
}
//# sourceMappingURL=./UiPEzFrnH.map